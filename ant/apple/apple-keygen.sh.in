#!/bin/bash
##########################################################################################
#                             ${project.name} MacOS KeyGen Utility                               #
##########################################################################################
#  Description:                                                                          #
#    1. Creates a self-signed Java Keystore for jetty wss://localhost or [hostname]      #
#    2. Exports public certificate from Java Keystore                                    #
#    3. Imports into Apple OS X Trusted Root Certs                                       #
#                                                                                        #
#       Note:  If [trustedcert] and [trustedkey] are specified, import to browser/OS is  #
#              omitted.                                                                  #
#                                                                                        #
#  Depends:                                                                              #
#    java                                                                                #
#                                                                                        #
#  Optional:                                                                             #
#    openssl - Required if providing [trustedcert], [trustedkey] parameters              #
#                                                                                        #
#  Usage:                                                                                #
#    $ ./${apple.keygen.name} "install" [hostname] [trustedcert] [trustedkey]            #
#    $ ./${apple.keygen.name} "uninstall"                                                #
#                                                                                        #
##########################################################################################

# Handle CN=${ssl.cn} override
cnoverride="$2"

# Handle trusted ssl certificate
if [[ -n $3 && -n $4 ]]; then
    trustedcertpath="$3"
    trustedkeypath="$4"
fi

# Random password hash
password=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-z0-9' | fold -w ${ssl.passlength} | head -n 1)

if ${apple.jvmver} > /dev/null 2>&1; then
    # Prefix with java_home --exec
    keytoolcmd="${apple.jvmcmd} keytool"
else
    # Fallback on Internet Plug-Ins version if needed
    keytoolcmd="\"${apple.jvmfallback}/keytool\""
fi

# Check for IPv4 address
function ip4 {
    if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 0
    fi
    return 1
}

# Replace all install-time variables
function replace_vars {
    cmd=$(echo "$1" | sed -e "s|\"keytool\"|$keytoolcmd|g")

    # Handle CN=${ssl.cn} override
    if [ -n "$cnoverride" ]; then
        cmd=$(echo "$cmd" | sed -e "s|CN=${ssl.cn},|CN=$cnoverride,|g")
        if ip4 "$cnoverride"; then
            cmd=$(echo "$cmd" | sed -e "s|san=dns:${ssl.cn},|san=ip:$cnoverride,|g")
        else
            cmd=$(echo "$cmd" | sed -e "s|san=dns:${ssl.cn},|san=dns:$cnoverride,|g")
        fi
        # Remove dangling san
        cmd=$(echo "$cmd" | sed -e "s|,dns:${ssl.cnalt}||g")
    fi

    cmd=$(echo "$cmd" | sed -e "s|\!install|${apple.installdir}|g")
    cmd=$(echo "$cmd" | sed -e "s|\!storepass|$password|g")
    cmd=$(echo "$cmd" | sed -e "s|\!keypass|$password|g")
    cmd=$(echo "$cmd" | sed -e "s|\!sslcert|$trustedcertpath|g")
    cmd=$(echo "$cmd" | sed -e "s|\!sslkey|$trustedkeypath|g")

    # Shorten cert life for macOS 10.15+ to 825 days per #491
    curver=($(sw_vers -productVersion |tr '.' ' '))
    curver="${curver[0]}.${curver[1]}"
    compare="$(echo "$curver>10.14" | bc -l)"
    if [ $compare -gt 0 ]; then
        cmd=$(echo "$cmd" | sed -e "s|-validity ${ssl.validity}|-validity 825|g")
    fi

    echo "$cmd"
    return 0
}

# Handle "community" mode, custom signing auth cert
if [ -n '${build.type}' ]; then
    authcertpath=$(echo "${authcert.install}" | sed -e "s|\!install|${apple.installdir}|g")
fi

# Write out the secure websocket properties file
function write_properties {
    propspath=$(echo "$1" | sed -e "s|\!install|${apple.installdir}|g")
    keystorepath=$(echo "${ssl.jks}" | sed -e "s|\!install|${apple.installdir}|g")
    echo "wss.alias=${ssl.alias}" > "$propspath"
    echo "wss.keystore=$keystorepath" >> "$propspath"
    echo "wss.keypass=$password" >> "$propspath"
    echo "wss.storepass=$password" >> "$propspath"
    echo "wss.host=${ssl.host}" >> "$propspath"
    if [ -n "$authcertpath" ]; then
        echo "authcert.override=$authcertpath" >> "$propspath"
    fi
    echo "" >> "$propspath"
    check_exists "$propspath"
    return $?
}

# Delete a file if exists
function delete_file {
    testfile=$(echo "$1" | sed -e "s|\!install|${apple.installdir}|g")
    rm -f "$testfile" > /dev/null 2>&1
    return 0
}

# Check to see if file exists with optional message
function check_exists {
    testfile=$(echo "$1" | sed -e "s|\!install|${apple.installdir}|g")
    if [ -e "$testfile" ]; then
        if [ -n "$2" ]; then
            echo -e "${bash.success} $2 $testfile"
        else
            echo -e "${bash.success} $testfile"
        fi
        return 0
    fi
    echo -e "${bash.failure} $testfile"
    return 1
}

# Remove all matching system certificates
function remove_certs {
    if security find-certificate -e "${vendor.email}" -Z  > /dev/null 2>&1; then
        echo -e "${bash.success} Found certificate matching ${vendor.email}"
        hash=$(security find-certificate -e "${vendor.email}" -Z |grep ^SHA-1|rev|cut -d' ' -f1|rev)
        if [ -n "$hash" ]; then
            # Remove and recurse
            security delete-certificate -Z "$hash" > /dev/null 2>&1 && remove_certs
        fi
    else
        echo -e "${bash.success} No more matching certificates found"
	fi

    return 0
}

# Runs a steps, optionally checks for a file
# e.g: run_step "Description" "ls -al *.txt > ./out" "./out"
function run_step {
    if eval "$(replace_vars "$2") > /dev/null 2>&1"; then
        if [ -z "$3" ]; then
            echo -e "${bash.success} $1"
            return 0
        elif check_exists "$3" "$1"; then
            return 0
        else
            return 1
        fi
    fi
    echo -e "${bash.failure}\n"
    return 1
}

#
# Uninstall mode
#
if [ "$1" == "uninstall" ]; then
    echo -e "\nRemoving installed certificates..."
	remove_certs
	echo -e "\n[Finished ${apple.keygen.name}]\n"
    exit 0
fi

#
# Install mode
#

# Delete old files if exist
delete_file "${ssl.jks}"
delete_file "${ssl.crt}"

# Handle trusted ssl certificate, if specified
if [ -n "$trustedcertpath" ]; then
    echo -e "\nCreating keystore for secure websockets..."
    run_step "\nConverting to PKCS12 keypair" "${trusted.command}" "${trusted.keypair}"
    run_step "\nConverting to jks format" "${trusted.convert}" "${ssl.jks}"
    write_properties "${ssl.properties}" || exit 1
    echo -e "\n[Finished ${apple.keygen.name}]\n"
    exit 0
fi

# Handle self-signed certificate
echo -e "\nCreating keystore for secure websockets..."
# Delete old files if exist
delete_file "${ca.jks}"
delete_file "${ca.crt}"
delete_file "${ssl.csr}"

run_step "Creating a CA keypair" "${ca.jkscmd}" "${ca.jks}" || exit 1
run_step "Exporting CA certificate" "${ca.crtcmd}" "${ca.crt}" || exit 1
run_step "Creating an SSL keypair" "${ssl.jkscmd}" "${ssl.jks}" || exit 1
run_step "Creating an SSL CSR" "${ssl.jkscsr}" "${ssl.csr}" || exit 1
run_step "Issuing SSL certificate from CA" "${ssl.crtcmd}" "${ssl.crt}" || exit 1
run_step "Importing CA certificate into SSL keypair" "${ssl.importca}" "" || exit 1
run_step "Importing chained SSL certificate into SSL keypair" "${ssl.importssl}" "" || exit 1

# Kill any running versions
kill -9 $(ps -e |grep "${project.filename}.jar" |sed "/grep/d"|awk '{print $1}') > /dev/null 2>&1

echo -e "\nWriting properties file..."
write_properties "${ssl.properties}" || exit 1

echo -e "\nRemoving installed certificates..."
remove_certs

# Install new certificate
run_step "Installing certificate" "${apple.keygen.install}" "" || exit 1

echo -e "\nCleaning up..."
delete_file "${ca.jks}"
delete_file "${ssl.csr}"
delete_file "${ssl.crt}"

echo -e "\n[Finished ${apple.keygen.name}]\n"
exit 0
