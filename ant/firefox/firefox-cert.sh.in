#!/bin/bash
###############################################################################
#           ${project.name} Linux / Unix Firefox Certificate Utility                  #
###############################################################################
#  Description:                                                               #
#   INSTALL:                                                                  #
#     * Searches for Firefox installation path                                #
#     * Automatically installs (or toggles on) the use of a custom SSL        #
#       certificate based on Firefox version and OS using a combination of    #
#       legacy AutoConfig or polcies.json                                     #
#                                                                             #
#   UNINSTALL:                                                                #
#     * If necessary, automatically deletes the custom SSL certificate using  #
#       a combination of legacy AutoConfig or policies.json                   #
#                                                                             #
#  Depends:                                                                   #
#    - lsregister (Apple-only, provided by launch services)                   #
#    - perl (standard with most modern Linux/Unix systems)                    #
#                                                                             #
#  Usage:                                                                     #
#    $ ./${firefoxcert.name} "install" [hostname]                                 #
#    $ ./${firefoxcert.name} "uninstall" [hostname]                               #
#                                                                             #
###############################################################################

# Array of possible Firefox application names.
appnames=("IceWeasel" "Firefox")	# "Firefox" "IceWeasel", etc

# Array of possible pref tag conflicts
conflicts=("general.config.filename")

mask=755

#
# Uses "which" and "readlink" to locate firefox on Linux, etc
#
function get_ffdir()
{
	for i in "${appnames[@]}"; do
		ffdirtemp=$("$locationdir/${locator.name}" $i)
		if [ $? == 0 ]; then
			ffdir="$ffdirtemp"
			return 0
		fi
	done
	return 1
}

echo "Searching for Firefox..."

ffdir=""
if [[ "$OSTYPE" == "darwin"* ]]; then
	# macOS
	locationdir=$(cd "$(dirname "$0")"; pwd)
	get_ffdir

	bindir="$ffdir/Contents/Resources/"
	prefdir="$ffdir/Contents/Resources/defaults/pref"
	installdir="${apple.installdir}"
	trayapp="$installdir"  # use .app package

	# Use policies.json deployment (Firefox 63+)
	if [ -n "$ffdir" ]; then
		version=$(HOME=/tmp "$ffdir/Contents/MacOS/firefox" --version|rev|cut -d' ' -f1|rev|cut -d. -f1)
		if [ "$version" -ge "63" ]; then
			policy='{ "policies": { "Certificates": { "ImportEnterpriseRoots": true } } }'
			policypath="$ffdir/Contents/Resources/distribution/policies.json"
		fi
	fi
else
	# Linux, etc
	location=$(readlink -f "$0")
	locationdir=$(dirname "$location")
	get_ffdir

	bindir="$ffdir"
	prefdir="$ffdir/defaults/pref"
	installdir="${linux.installdir}"
	dercertpath=$(echo "${ca.crt}" | sed -e "s|\!install|$installdir|g")
	trayapp=""  # skip

	# Use policies.json deployment (Firefox 65+)
	if [ -n "$ffdir" ]; then
		version=$(HOME=/tmp XAUTHORITY=/tmp $ffdir/firefox --version|rev|cut -d' ' -f1|rev|cut -d. -f1)
		if [ "$version" -ge "65" ]; then
			policy='{ "policies": { "Certificates": { "Install": ["'$dercertpath'"] } } }'
			policypath="$ffdir/distribution/policies.json"
		fi
	fi
fi

# Firefox was not found, skip Firefox certificate installation
if [ -z "$ffdir" ] || [ "$ffdir" = "/" ]; then
	echo -e "${bash.skipped} Firefox not found"
	exit 0
else
    echo -e "${bash.success} Firefox $version found at $ffdir"
fi

# Handle CN=${ssl.cn} override
cname="${ssl.cn}"
if [ -n "$2" ]; then
    cname="$2"
fi

# Perform substitutions
dercertpath=$(echo "${ca.crt}" | sed -e "s|\!install|$installdir|g")
prefspath=$(echo "${firefoxprefs.install}" | sed -e "s|\!install|$installdir|g")
configpath=$(echo "${firefoxconfig.install}" | sed -e "s|\!install|$installdir|g")

#
# Uninstall mode
#
if [ "$1" == "uninstall" ]; then
    # Newer Firefox versions don't use AutoConfig
    if [ -n "$policy" ]; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            echo -e "${bash.skipped} Configured via policies.json, no uninstall needed"
            exit 0
        else
            # Linux, etc
            echo -e "\nSearching for $policypath..."
            if [ -f "$policypath" ]; then
                # Delete cert entry
                "$locationdir/${jsonwriter.name}" "$policypath" "$policy" "" "true"
                echo -e "${bash.success} Deleted cert entry"
                exit 0
            else
                echo -e "${bash.skipped} $policypath not found"
                exit 0
            fi
        fi
    fi
    echo -e "\nSearching for ${project.name} AutoConfig..."
    if [ -f "$bindir/${firefoxconfig.name}" ]; then
        echo -e "${bash.success} Check Firefox config exists"
        cp "$configpath" "$bindir/${firefoxconfig.name}"
        chmod $mask "$bindir/${firefoxconfig.name}"
        # Replace ${certData} with the blank string
        perl -pi -e "s#\\\$\{certData\}##g" "$bindir/${firefoxconfig.name}"
        ret1=$?
        perl -pi -e "s#\\\$\{uninstall\}#true#g" "$bindir/${firefoxconfig.name}"
        ret2=$?
        perl -pi -e "s#\\\$\{timestamp\}#-1#g" "$bindir/${firefoxconfig.name}"
        ret3=$?
        perl -pi -e "s#\\\$\{commonName\}#$cname#g" "$bindir/${firefoxconfig.name}"
        ret4=$?
        perl -pi -e "s#\\\$\{trayApp\}##g" "$bindir/${firefoxconfig.name}"
        ret5=$?
        if [ $ret1 -eq 0 ] && [ $ret2 -eq 0 ] && [ $ret3 -eq 0 ] && [ $ret4 -eq 0 ] && [ $ret5 -eq 0 ]; then
            echo -e "${bash.success} Certificate removed successfully"
        else
            echo -e "${bash.failure} ${project.name} Certificate removal failed"
            exit 1
        fi
    else
        echo -e "${bash.skipped} ${project.name} AutoConfig not found"
    fi
    echo -e "\n[Finished ${firefoxcert.name}]\n"
    exit 0
fi

#
# Install mode (default)
#

# Use policy file
if [ -n "$policy" ]; then
	"$locationdir/${jsonwriter.name}" "$policypath" "$policy"
	chmod go+r "$policypath"
	chmod go+rx "$(dirname "$policypath")"
	echo -e "${bash.success} Installed $policypath"
	exit 0
fi

echo -e "\nSearching for Firefox AutoConfig conflicts..."

# Iterate over each preference file looking for conflicts
for i in $prefdir/*; do
	if [ "$i" == "$prefdir/${firefoxprefs.name}" ]; then
		# skip, ${project.name} preferences
		echo -e "${bash.skipped} Ignoring ${project.name} preference file \"${firefoxprefs.name}\""
		continue
	fi
	for j in "${conflicts[@]}"; do
		grep '"$j"' $i &>/dev/null
		ret1=$?
		grep "'$j'" $i &>/dev/null
		ret2=$?
		if [ $ret1 -eq 0 ] || [ $ret2 -eq 0 ]; then
		   echo -e "${bash.failure} Conflict found while looking for \"$j\"\n\tin $i"
		   exit 1
		fi
	done
done

echo -e "${bash.success} No conflicts found"



echo -e "\nRegistering with Firefox..."
cp "$prefspath" "$prefdir/${firefoxprefs.name}"
cp "$configpath" "$bindir/${firefoxconfig.name}"
chmod $mask "$prefdir/${firefoxprefs.name}"
chmod $mask "$bindir/${firefoxconfig.name}"

bcert="-----BEGIN CERTIFICATE-----"
ecert="-----END CERTIFICATE-----"
blank=""

# Read certificate, stripping newlines
certdata=$(cat "$dercertpath" |tr -d '\n'|tr -d '\r')

# Strip all non-base64 data
certdata=$(echo "$certdata" | sed -e "s|$bcert|$blank|g")
certdata=$(echo "$certdata" | sed -e "s|$ecert|$blank|g")
timestamp=$(date +%s)

if [ -f "$bindir/${firefoxconfig.name}" ]; then
	echo -e "${bash.success} Check ${project.name} AutoConfig exists"
	# Replace ${certData} with the base64 string
    perl -pi -e "s#\\\$\{certData\}#$certdata#g" "$bindir/${firefoxconfig.name}"
    ret1=$?
    perl -pi -e "s#\\\$\{uninstall\}#false#g" "$bindir/${firefoxconfig.name}"
    ret2=$?
    perl -pi -e "s#\\\$\{timestamp\}#$timestamp#g" "$bindir/${firefoxconfig.name}"
    ret3=$?
    perl -pi -e "s#\\\$\{commonName\}#$cname#g" "$bindir/${firefoxconfig.name}"
    ret4=$?
    perl -pi -e "s#\\\$\{trayApp\}#$trayapp#g" "$bindir/${firefoxconfig.name}"
    ret5=$?
    if [ $ret1 -eq 0 ] && [ $ret2 -eq 0 ] && [ $ret3 -eq 0 ] && [ $ret4 -eq 0 ] && [ $ret5 -eq 0 ]; then
        echo -e "${bash.success} Certificate installed"
    else
        echo -e "${bash.failure} Certificate installation failed"
    fi
else
	echo -e "${bash.failure} Cannot locate ${project.name} AutoConfig"
	exit 1
fi

echo -e "\n[Finished ${firefoxcert.name}]\n"
exit 0

