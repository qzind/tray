#!/bin/bash
##########################################################################################
#                             ${project.name} Linux KeyGen Util                                  #
##########################################################################################
#  Description:                                                                          #
#     1. Creates a self-signed Java Keystore for jetty wss://localhost or [hostname]     #
#     2. Exports public certificate from Java Keystore
#
#     Note:  If [sslcert] and [sslkey] are specified, import to browser/OS is omitted.   #
#                                                                                        #
#  Depends:                                                                              #
#    java                                                                                #
#                                                                                        #
#  Optional:                                                                             #
#    openssl - Required if providing [sslcert], [sslkey] parameters                      #
#                                                                                        #
#  Usage:                                                                                #
#    $ ./${linux.keygen.name} [hostname] [sslcert] [sslkey]                                   #
#                                                                                        #
##########################################################################################

# Random password hash
password=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-z0-9' | fold -w ${jks.passlength} | head -n 1)

# Handle trusted ssl certificate
if [[ -n $2 && -n $3 ]]; then
    sslcertpath="$2"
    sslkeypath="$3"
    makekeystore="${ssl.convert}"
else
    makekeystore="${jks.command}"
fi

makedercert="${der.command}"
installdir="${linux.installdir}"

# Substitution variables (!storepass, !keypass, !install, etc)
install="${jks.install}"
storepass="${jks.storepass}"
keypass="${jks.keypass}"
keystore="${jks.keystore}"
dercert="${der.cert}"
props="${jks.properties}"

# Keystore generation variable substitutions
keystorepath="${keystore/$install/$installdir}"
makekeystore="${makekeystore/$storepass/$password}"
makekeystore="${makekeystore/$keypass/$password}"
makekeystore="${makekeystore/$keystore/$keystorepath}"

# Handle CN=${jks.cn} override
if [ -n "$1" ]; then
    cname="CN=${jks.cn},"
    override="CN=$1,"
    makekeystore="${makekeystore/$cname/$override}"
fi

# Cert export variable substitutions
dercertpath="${dercert/$install/$installdir}"
makedercert="${makedercert/$storepass/$password}"
makedercert="${makedercert/$keypass/$password}"
makedercert="${makedercert/$keystore/$keystorepath}"
makedercert="${makedercert/$dercert/$dercertpath}"

# // Handle "community" mode, custom signing auth cert
if [ -n "${build.type}" ]; then
    authcert="${authcert.install}"
    authcertpath="${authcert/$install/$installdir}"
fi

# Property file containing jks signing info
propspath="${props/$install/$installdir}"

# Convert trusted SSL cert to jks
function create_pkcs12 {
    echo "Creating PKCS12 keypair..."
    keypair="${ssl.keypair}"
    sslcert="${ssl.cert}"
    sslkey="${ssl.key}"
    generated="${ssl.command}"

    keypairpath="${keypair/$install/$installdir}"
    generated="${generated/$keypair/$keypairpath}"
    generated="${generated/$sslcert/$sslcertpath}"
    generated="${generated/$sslkey/$sslkeypath}"
    generated="${generated/$keypass/$password}"

    makekeystore="${makekeystore/$keypair/$keypairpath}"
    makekeystore="${makekeystore/$keypass/$password}" # second ${jks.keypass}

    eval "$generated" > /dev/null 2>&1
    check_exists "$keypairpath"

    if [ $? -ne 0 ]; then
        echo "Error creating PKCS12 keypair from $sslcertpath, $sslkeypath to $keypairpath"
        echo -e "${bash.failure}\n"
        exit 1
    fi

    # Remove lingering self-signed certs
    rm "$dercertpath" > /dev/null 2>&1

    return 0
}

# Write out the secure websocket properties file
function write_properties {
    echo "Writing properties file..."
    echo "wss.alias=${jks.alias}" > "$propspath"
    echo "wss.keystore=$keystorepath" >> "$propspath"
    echo "wss.keypass=$password" >> "$propspath"
    echo "wss.storepass=$password" >> "$propspath"
    echo "wss.host=${jks.host}" >> "$propspath"
    if [ -n "$authcertpath" ]; then
        echo "authcert.override=$authcertpath" >> "$propspath"
    fi
    echo "" >> "$propspath"
    check_exists  "$propspath"
    return $?
}

# Check to see if file exists
function check_exists {
    if [ -e "$1" ]; then
        echo -e "${bash.success}\n"
        return 0
    fi
    echo -e "${bash.failure}\n"
    return 1
}


# Delete old keystore, if exists
rm -f "$keystorepath" > /dev/null 2>&1

# Handle trusted ssl certificate, if specified
if [ -n "$sslcertpath" ]; then
    create_pkcs12
    echo "Creating keystore for secure websockets..."
    eval "$makekeystore" > /dev/null 2>&1
    check_exists "$keystorepath"
    write_properties
    status=$?
    echo "Finished"
    exit $status
fi

# Check for keytool command
"${jks.keytool} -help" > /dev/null 2>&1
if [ $? -ne 0 ]; then
    export PATH=$PATH:/usr/java/latest/bin/ 
fi

echo "Creating keystore for secure websockets..."
eval "$makekeystore" > /dev/null 2>&1
check_exists "$keystorepath"

echo "Converting keystore to native certificate..."
eval "$makedercert" > /dev/null 2>&1
check_exists "$dercertpath"

write_properties
status=$?
echo "Finished"
exit $status
