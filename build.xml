<?xml version="1.0" encoding="UTF-8"?>

<project name="qz" default="distribute" basedir=".">
    <property file="ant/project.properties"/>
    <import file="ant/javafx.xml"/>
    <import file="ant/signing.xml"/>
    <import file="ant/apple/installer.xml" />
    <import file="ant/linux/installer.xml"/>
    <import file="ant/windows/installer.xml"/>

    <target name="distribute" depends="init,clean,download-javafx,build-jar,override-authcert,include-assets,whitelist-certs">
        <echo message="Process complete" />
    </target>

    <target name="init">
        <property environment="env"/>
        <condition property="codesign.windows" value="true">
            <and>
                <isset property="target.platform.windows"/>
                <isset property="signing.tsaurl"/>
            </and>
        </condition>
        <condition property="codesign.linux" value="true">
            <and>
                <isset property="target.platform.linux"/>
                <isset property="signing.tsaurl"/>
            </and>
        </condition>
        <condition property="codesign.mac" value="true">
            <and>
                <isset property="target.platform.mac"/>
                <isset property="signing.tsaurl"/>
            </and>
        </condition>

        <echo message="Building ${project.filename} using JDK ${ant.java.version}" />
    </target>

    <target name="clean" depends="init">
        <delete dir="${out.dir}"/>
    </target>

    <target name="compile-socket" depends="init">
        <mkdir dir="${build.dir}/${project.filename}"/>

        <!-- find the pdfbox jar -->
        <path id="find.jar">
            <fileset dir="lib/printing/">
                <include name="pdfbox*.jar"/>
            </fileset>
        </path>
        <property name="pdfbox.path" value="${toString:find.jar}" />

        <javac destdir="${build.dir}/${project.filename}" source="${javac.source}" target="${javac.target}" includeantruntime="false" encoding="UTF-8">
            <src path="${src.dir}"/>
            <classpath>
                <!-- prefer bouncycastle from pdfbox over simplersa -->
                <path id="plugin.override">
                    <pathelement path="${pdfbox.path}" />
                </path>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${java.home}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <compilerarg value="-Xlint:-options"/>
        </javac>

        <!-- Include non-class files from src in build directory -->
        <copy todir="${build.dir}/${project.filename}">
            <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>

        <copy todir="${dist.dir}">
            <fileset file="${basedir}/LICENSE.txt"/>
        </copy>
    </target>

    <target name="build-jar" depends="compile-socket">
        <echo level="info">Building Jar for Socket use</echo>
        <mkdir dir="${sign.lib.dir}"/>
        <jar compress="${jar.compress}" index="${jar.index}" destfile="${dist.dir}/${project.filename}.jar" duplicate="preserve">
            <fileset dir="${build.dir}/${project.filename}"/>
            <zipgroupfileset dir="${sign.lib.dir}" includes="**/*.jar" erroronmissingdir="false"/>
            <zipgroupfileset dir="lib">
                <include name="**/*.jar"/>
                <exclude name="**/jfxrt.jar"/>
                <exclude name="**/jssc-*.jar" if="codesign.mac"/>
            </zipgroupfileset>
            <manifest>
                <attribute name="Application-Name" value="${project.name}"/>
                <attribute name="Main-Class" value="qz.ws.PrintSocketServer"/>
                <attribute name="Permissions" value="all-permissions"/>
            </manifest>
        </jar>

        <antcall target="sign-jar">
            <param name="sign.jar.file" value="${dist.dir}/${project.filename}.jar"/>
        </antcall>

        <antcall target="apple-installers.codesign"/>
    </target>

    <!-- Get version information from JAR -->
    <target name="get-version" depends="build-jar">
        <property file="ant/project.properties"/>
        <java jar="${dist.dir}/${project.filename}.jar" fork="true" outputproperty="build.version">
            <arg value="--version"/>
        </java>
        <!-- Fallback to a bogus version number if the above command failed -->
        <property name="build.version" value="0.0.0" />

        <java jar="${dist.dir}/${project.filename}.jar" fork="true" outputproperty="apple.bundleid">
            <arg value="--bundleid"/>
        </java>
        <!-- Fallback to a safe bundle id if the above command failed -->
        <property name="apple.bundleid" value="io.qz.fallback.${project.filename}" />

        <echo level="info">
            Version   : ${build.version}
            Bundle Id : ${apple.bundleid}
        </echo>
    </target>

    <target name="internal-authcert" unless="authcert.use">
        <echo level="info">Using internal cert for signing auth</echo>
        <property name="build.type" value=""/>
    </target>

    <!-- install override.crt for "community" branded builds -->
    <target name="override-authcert" depends="internal-authcert" if="authcert.use">
        <echo level="info">Bundling with manual cert for signing auth: ${authcert.use}</echo>
        <!-- See also: Constants.OVERRIDE_CERT -->
        <copy file="${authcert.use}" tofile="${dist.dir}/override.crt" overwrite="true"/>
        <property name="build.type" value="-community"/>
    </target>

    <!-- install certs to "whitelist" directory for whitelabel builds -->
    <target name="whitelist-certs" depends="include-assets" if="whitelist.use">
        <echo level="info">Copying certificate(s) to dist/whitelist: ${whitelist.use}</echo>
        <!-- See also: Constants.WHITELIST_CERT_DIR -->

        <mkdir dir="${dist.dir}/whitelist"/>
        <copy file="${whitelist.use}" todir="${dist.dir}/whitelist" overwrite="true"/>
    </target>

    <target name="include-assets" depends="init,get-version" unless="dist.minimal">
        <echo level="info">Copying resource files to output</echo>

        <copy todir="${dist.dir}/demo/assets">
            <fileset dir="${basedir}/assets">
                <exclude name="**/*.properties"/>
                <exclude name="**/branding/"/>
            </fileset>
        </copy>

        <copy todir="${dist.dir}/demo/js">
            <fileset dir="js">
                <exclude name="**/package.json"/>
                <exclude name="**/README.md"/>
            </fileset>
        </copy>

        <copy todir="${dist.dir}/demo/css">
            <fileset dir="css"/>
        </copy>

        <copy todir="${dist.dir}/demo/fonts">
            <fileset dir="fonts"/>
        </copy>

        <copy todir="${dist.dir}/demo">
            <fileset file="sample.html"/>
        </copy>
    </target>

    <target name="distill-icu" depends="init">
        <exec executable="python">
            <arg line="ant/lib/slim-icu.py lib/charsets"/>
        </exec>
    </target>

    <target name="build-installer-apple" depends="apple-installers.pkgbuild" />
    <target name="build-installer-linux" depends="linux-installers.makeself" />
    <target name="build-installer-windows" depends="windows-installers.nsis" />

</project>
